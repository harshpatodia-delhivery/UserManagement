openapi: 3.0.3
info:
  description: 'This is a demo user management service '
  version: 1.0.0
  title: User Management
servers:
  - url: localhost:8081
paths:
  /user:
    post:
      tags:
        - user operations
      summary: Create user
      description: We can create user by adding user info!
      operationId: createUser
      parameters:
        - in: query
          name: body
          description: Created user object
          required: true
          schema:
            $ref: '#/components/schemas/User'
      responses:
        '200':
          $ref: '#/components/schemas/User'
        default:
          description: successful operation
    get:
      tags:
        - Filter user data
      summary: Get all User data  with some filters.
      description: >
        Get list of all Users data

      operationId: getAllUsers
      parameters:
        - $ref: "#/components/parameters/Query"
      responses:
        "200":
          $ref: "#/components/schemas/UserResponse"
        "400":
          $ref: "#/components/responses/ErrorResponse"
        "401":
          $ref: "#/components/responses/ErrorResponse"
        "404":
          $ref: "#/components/responses/ErrorResponse"

  "/user/{userId}":
    get:
      tags:
        - user operations
      summary: Get user by user id
      description: ''
      operationId: getUserById
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            $ref: "#/components/parameters/userId"
      responses:
        '200':
          $ref: "#/components/schemas/UserResponse"
        '400':
          description: Invalid userId supplied
        '404':
          description: User not found
    put:
      tags:
        - user operations
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            $ref: "#/components/parameters/userId"
      requestBody:
        $ref: '#/components/requestBodies/User'
      responses:
        '200':
          $ref: "#/components/schemas/UserResponse"
        '400':
          description: Invalid user supplied
        '404':
          description: User not found
    delete:
      tags:
        - user operations
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: userId
          in: path
          description: userId that needs to be deleted
          required: true
          schema:
            $ref: "#/components/parameters/userId"
      responses:
        '200':
          $ref: "#/components/parameters/userId"
        '400':
          description: Invalid userId supplied
        '404':
          description: User not found
  '/userHistory/{userId}/change-log':
    get:
      tags:
        - Change Log
      summary: Get the User change log
      operationId: getUserChangeLog
      parameters:
        - name: userId
          in: path
          description: userId that needs to be deleted
          required: true
          schema:
            $ref: "#/components/parameters/userId"
        - $ref: "#/components/parameters/StartDateTime"
        - $ref: "#/components/parameters/Duration"
        - $ref: "#/components/parameters/PageSize"
        - $ref: "#/components/parameters/PageOffset"
      responses:
        "200":
          $ref: '#/components/schemas/User'
        "400":
          $ref: "#/components/responses/GetErrorResponse"
        "401":
          $ref: "#/components/responses/GetErrorResponse"
        "404":
          $ref: "#/components/responses/GetErrorResponse"


components:
  parameters:
    userId:
      description: Unique user id for user.
      name: userId
      in: path
      required: true
      schema:
        type: string
        format: uuid
    PageSize:
      description: Number of items to return.
      name: limit
      in: query
      required: false
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 50
    PageOffset:
      description: Number of items to skip from start.
      name: offset
      in: query
      required: false
      schema:
        type: integer
        minimum: 0
        default: 0
    StartDateTime:
      description: Start time of the change log in unix epoch format.
      name: from
      in: query
      required: true
      schema:
        type: integer
    Duration:
      description: Number of days for which change log is to be returned.
      name: Time duration
      in: query
      required: false
      schema:
        type: integer
        minimum: 1
        maximum: 31
        default: 1
    Query:
      name: query
      in: query
      description: >-
        Query criteria. Refer following links for more details:<br/> -
        [match](https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-match-query.html)<br/>

        - [multi_match](https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-multi-match-query.html)<br/>

        - [term](https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-term-query.html)<br/>

        - [terms](https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-terms-query.html)<br/>

        - [range](https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-range-query.html)<br/>

        - [regexp](https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-regexp-query.html)
      schema:
        $ref: "#/components/schemas/Query"


  requestBodies:
    User:
      description: user Response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/User'

  schemas:
    UserResponse:
      type: object
      properties:
        error:
          $ref: "#/components/schemas/Error"
        data:
          type: object
          properties:
            User:
              type: array
              items:
                $ref: "#/components/schemas/User"
            totalItems:
              type: integer
              format: int64
        request:
          $ref: "#/components/schemas/Request"
    User:
      description: User info
      type: object
      required:
        - username
        - firstName
        - lastName
        - email
        - password
        - phone
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        phone:
          type: string
    Query:
      properties:
        match:
          type: array
          items:
            type: object
        multi_match:
          type: array
          items:
            type: object
        term:
          type: array
          items:
            type: object
        terms:
          type: array
          items:
            type: object
        range:
          type: array
          items:
            type: object
        regexp:
          type: array
          items:
            type: object

    ErrorResponse:
      type: object
      required:
        - error
        - request
      properties:
        error:
          $ref: "#/components/schemas/Error"
        request:
          $ref: "#/components/schemas/Request"
    Error:
      description: Error Information
      type: object
      required:
        - code
        - description
      properties:
        code:
          type: string
          description: Error code
        description:
          type: string
          description: Error description
        additionalInfo:
          type: object
          description: Additional information related to the error
    Request:
      type: object
      required:
        - uri
      properties:
        uri:
          description: The API end point where the request was received
          type: string
        method:
          description: HTTP method requested on the API endpoint
          type: string
          enum:
            - POST
            - GET
            - PUT
        queryString:
          description: Query string received by the server
          type: string
        body:
          description: Request body data received by the server
          type: object
    GetErrorResponse:
      allOf:
        - $ref: "#/components/schemas/ErrorResponse"
        - type: object
          properties:
            data:
              type: object
              properties:
                id:
                  type: string

  responses:
    ErrorResponse:
      description: Error Occurred
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
    GetErrorResponse:
      description: Error Occurred
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/GetErrorResponse"
