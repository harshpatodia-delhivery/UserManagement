swagger: '2.0'
info:
  description: 'This is a demo user management server. '
  version: 1.0.0
  title: User Management
host: 'localhost:8080'
basePath: /v2
tags:
  - name: user
    description: Operations about user
schemes:
  - https
  - http
paths:
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: We can create user by adding user info!
      operationId: createUser
      produces:
        - application/xml
        - application/json
      parameters:
        - in: body
          name: body
          description: Created user object
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/User'
        default:
          description: successful operation
  '/user/{userId}':
    get:
      tags:
        - user
      summary: Get user by user id
      description: ''
      operationId: getUserByName
      produces:
        - application/xml
        - application/json
      parameters:
        - name: userId
          in: path
          description: The user id that needs to be fetched.
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    put:
      tags:
        - user
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      produces:
        - application/xml
        - application/json
      parameters:
        - name: userId
          in: path
          description: user id that need to be updated
          required: true
          type: string
        - in: body
          name: body
          description: Updated user object
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/User'
        '400':
          description: Invalid user supplied
        '404':
          description: User not found
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      produces:
        - application/xml
        - application/json
      parameters:
        - name: userId
          in: path
          description: userId that needs to be deleted
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: boolean
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
definitions:
  User:
    type: object
    properties:
      id:
        type: integer
        format: int64
      username:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      email:
        type: string
      password:
        type: string
      phone:
        type: string

    xml:
      name: User
  ApiResponse:
    type: object
    properties:
      code:
        type: integer
        format: int32
      type:
        type: string
      message:
        type: string
